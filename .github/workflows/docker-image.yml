name: Docker Image CI

on:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # - name: Format check
      #   run: deno fmt --check

      # - name: Lint
      #   run: deno lint

  docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fp-ncc
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=latest
            echo "VERSION=latest" >> $GITHUB_OUTPUT
            echo "VERSION-latest"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION"
          fi

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fp-ncc:${{ steps.version.outputs.VERSION }}
            docker stop fp-ncc || echo "Gak ada yang bisa distop"
            docker rm fp-ncc || echo "Gak ada yang bisa dihapus"
            docker run -d --name fp-ncc -p ${{ secrets.PORT_EXPOSE }}:${{ secrets.PORT_EXPOSE }} -e SUPABASE_URL=${{ secrets.SUPABASE_URL }} -e SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} -e SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }} -e SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }} -e PORT=${{ secrets.PORT_EXPOSE }} -e HOST=${{ secrets.HOST_EXPOSE }}  -e UPLOAD_DIR=${{ secrets.UPLOAD_DIR }} -e MAX_FILE_SIZE=${{ secrets.MAX_FILE_SIZE }} ${{ secrets.DOCKERHUB_USERNAME }}/fp-ncc:${{ steps.version.outputs.VERSION }}
            docker image prune -f
